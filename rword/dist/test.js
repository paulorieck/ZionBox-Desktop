"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const rword_1 = require("./rword");
assert(typeof rword_1.rword.generate() == 'string', 'generate() type');
assert(Array.isArray(rword_1.rword.generate(2)), 'generate(2) type');
assert.equal(rword_1.rword.generate(15).length, 15, 'generate(15) length');
assert.equal(rword_1.rword.words.length, 128660, 'word list (small)');
rword_1.rword.load('big_en-US');
assert.equal(rword_1.rword.words.length, 370099, 'word list (big)');
const word = rword_1.rword.words[0];
rword_1.rword.shuffle();
assert.notEqual(rword_1.rword.words[0], word, 'shuffle');
assert.equal(rword_1.rword.generate(10, { length: 4 }).findIndex(w => w.length != 4), -1, 'generate() exact length');
assert.equal(rword_1.rword.generate(100, { length: '3-4' }).findIndex(w => w.length > 4), -1, 'generate() length range');
assert.equal(rword_1.rword.generate(10, { capitalize: 'none' }).findIndex(w => !/^[a-z]+$/.test(w)), -1, 'generate() capitalize none');
assert.equal(rword_1.rword.generate(10, { capitalize: 'all' }).findIndex(w => !/^[A-Z]+$/.test(w)), -1, 'generate() capitalize all');
assert.equal(rword_1.rword.generate(10, { capitalize: 'first' }).findIndex(w => !/^[A-Z][a-z]+$/.test(w)), -1, 'generate() capitalize first');
assert.equal(rword_1.rword.generate(10, { contains: /ing$/ }).filter(w => /ing$/.test(w)).length, 10, 'generate() contains');
assert(typeof rword_1.rword.generateFromPool() == 'string', 'generateFromPool() type');
assert(Array.isArray(rword_1.rword.generateFromPool(2)), 'generateFromPool(2) type');
assert.throws(() => rword_1.rword.generateFromPool(11), 'generateFromPool(11)');
console.log('Tests completed without error');
//# sourceMappingURL=test.js.map